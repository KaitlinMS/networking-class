REPORT - ASSIGNMENT 2
-----------------------------

Group Members:
Cameron Sapp - 0768086
Manivanna Thevathasan - 0754015
Kaitlin Smith - 0645771

-----------------------------
PROBLEM SOLUTION
-----------------------------

CBC is implemented as the function 'encrypt' on the client side. The reason being
messages need to be encrypted prior to being sent. The function takes in a message
and breaks it into a list of chunks where each chunk adheres to a predefined length.
Initially the first chunk is xor'ed with the Initialization vector and then again with 
Key. Following that each chunk is xor'ed with the previous encrypted chunk until all 
chunks are encrypted. Finally the entire ciphertext is formed with all encrypted chunks
concatenated together.

A chunk size of 8, the value of the Initialization Vector and 
the Key were all determined arbitrarily. However, a small chunk size as well as a multiple
of two was found to be an easy size to test with.

If the client is unable to connect to the server, it will continuously retry every 5 seconds
until a successful connection is made or it is manually stopped. This continuous retry helps
avoid problems arising from starting the client before the server, but also helps when the client
is having "legitimate" issues with connection.

-----------------------------
TESTING
-----------------------------

We tested the program by running different scenarios in which this client-server 
combination could run. Running either the client or server on one machine and then
trying to run the opposite chosen file on another machine, (not connected via LAN), 
will not result in a successful connection. We document this fact because it was found 
that this issue is out of our hands (we can't unblock incoming connections on servers). 
However, running these files on machines that are connected via LAN did yield successful
connections. 

We also tested running the client while providing it both a hostname and an IP address, both
result in successful connections. 

-----------------------------
PROBLEMS ENCOUNTERED
-----------------------------

No problems were encountered during this assignment.

-----------------------------
SAMPLE RUN
-----------------------------

Note: Please keep in mind that the server must start running before the client is run.
The server and client were run in separate console windows, thus the sample run below shows
the output that occurred within each window.

Server Output:
./server 5000
Server listening...
Hello! This is a sample run. 12345678.

Client Output:
./client localhost 5000
Enter a message: Hello! This is a sample run. 12345678.

-----------------------------
DESIGN DECISIONS
-----------------------------

The code was split into three files, enforcing separation of concern and keeping like functions
together. Not only was the code for the client and server put into separate files, but a small
collection of more general and shared functions was placed in the common.py file.

We are assuming that input provided to our client and server are in both correct and acceptable.
As such we didn't include any error checking code. The reason for this decision was 
based on the last assignment's correct and acceptable provided input. 
