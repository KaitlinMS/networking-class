REPORT - ASSIGNMENT 2
-----------------------------

Group Members:
Cameron Sapp - 0768086
Manivanna Thevathasan - 0754015
Kaitlin Smith - 0645771

-----------------------------
PROBLEM SOLUTION
-----------------------------

CBC is implemented as the function 'encrypt' on the client side. The reason being,
messages need to be encrypted prior to being sent. The function takes in a message,
and breaks it into a list of chunks where each chunk adheres to a predefined length. 
Initially the first chunk is xor'ed with the Initialization vector and then again with 
Key. Following that each chunk is xor'ed with the previous encrypted chunk until all 
chunks are encrypted. Finally the entire ciphertext is formed with all encrypted chunks
concatenated together. 

-----------------------------
TESTING
-----------------------------



-----------------------------
PROBLEMS ENCOUNTERED
-----------------------------

No problems were encountered during this assignment.

-----------------------------
SAMPLE RUN
-----------------------------

Note: Please keep in mind that the server must start running before the client is run.
The server and client were run in separate console windows, thus the sample run below shows
the output that occurred within each window.

Server Output:
./server 5000
Server listening...
Hello! This is a sample run. 12345678.

Client Output:
./client localhost 5000
Enter a message: Hello! This is a sample run. 12345678.

-----------------------------
DESIGN DECISIONS
-----------------------------

The code was split into three files, enforcing separation of concern and keeping like functions
together. Not only was the code for the client and server put into separate files, but a small
collection of more general and shared functions was placed in the common.py file.